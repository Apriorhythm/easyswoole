* Docker镜像相关
** 自制CentOS镜像
*** 1. 服务器安装EPEL源以及docker-io
#+BEGIN_SRC shell
# RHEL/CentOS 7 64-Bit ##
rpm -Uvh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm


## RHEL/CentOS 6 32-Bit ##
rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
## RHEL/CentOS 6 64-Bit ##
rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm



yum -y update;
yum -y install docker-io;

#+END_SRC


*** 2. 复制docker官方的脚本

vim ~/createimage.sh
// 复制来自https://github.com/docker/docker/blob/master/contrib/mkimage-yum.sh的内容

#+BEGIN_SRC shell

#!/usr/bin/env bash
#
# Create a base CentOS Docker image.
#
# This script is useful on systems with yum installed (e.g., building
# a CentOS image on CentOS).  See contrib/mkimage-rinse.sh for a way
# to build CentOS images on other systems.

set -e

usage() {
    cat <<EOOPTS
$(basename $0) [OPTIONS] <name>
OPTIONS:
  -p "<packages>"  The list of packages to install in the container.
                   The default is blank.
  -g "<groups>"    The groups of packages to install in the container.
                   The default is "Core".
  -y <yumconf>     The path to the yum config to install packages from. The
                   default is /etc/yum.conf for Centos/RHEL and /etc/dnf/dnf.conf for Fedora
EOOPTS
    exit 1
}

# option defaults
yum_config=/etc/yum.conf
if [ -f /etc/dnf/dnf.conf ] && command -v dnf &> /dev/null; then
	yum_config=/etc/dnf/dnf.conf
	alias yum=dnf
fi
install_groups="Core"
while getopts ":y:p:g:h" opt; do
    case $opt in
        y)
            yum_config=$OPTARG
            ;;
        h)
            usage
            ;;
        p)
            install_packages="$OPTARG"
            ;;
        g)
            install_groups="$OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
    esac
done
shift $((OPTIND - 1))
name=$1

if [[ -z $name ]]; then
    usage
fi

target=$(mktemp -d --tmpdir $(basename $0).XXXXXX)

set -x

mkdir -m 755 "$target"/dev
mknod -m 600 "$target"/dev/console c 5 1
mknod -m 600 "$target"/dev/initctl p
mknod -m 666 "$target"/dev/full c 1 7
mknod -m 666 "$target"/dev/null c 1 3
mknod -m 666 "$target"/dev/ptmx c 5 2
mknod -m 666 "$target"/dev/random c 1 8
mknod -m 666 "$target"/dev/tty c 5 0
mknod -m 666 "$target"/dev/tty0 c 4 0
mknod -m 666 "$target"/dev/urandom c 1 9
mknod -m 666 "$target"/dev/zero c 1 5

# amazon linux yum will fail without vars set
if [ -d /etc/yum/vars ]; then
	mkdir -p -m 755 "$target"/etc/yum
	cp -a /etc/yum/vars "$target"/etc/yum/
fi

if [[ -n "$install_groups" ]];
then
    yum -c "$yum_config" --installroot="$target" --releasever=/ --setopt=tsflags=nodocs \
        --setopt=group_package_types=mandatory -y groupinstall "$install_groups"
fi

if [[ -n "$install_packages" ]];
then
    yum -c "$yum_config" --installroot="$target" --releasever=/ --setopt=tsflags=nodocs \
        --setopt=group_package_types=mandatory -y install "$install_packages"
fi

yum -c "$yum_config" --installroot="$target" -y clean all

cat > "$target"/etc/sysconfig/network <<EOF
NETWORKING=yes
HOSTNAME=localhost.localdomain
EOF

# effectively: febootstrap-minimize --keep-zoneinfo --keep-rpmdb --keep-services "$target".
#  locales
rm -rf "$target"/usr/{{lib,share}/locale,{lib,lib64}/gconv,bin/localedef,sbin/build-locale-archive}
#  docs and man pages
rm -rf "$target"/usr/share/{man,doc,info,gnome/help}
#  cracklib
rm -rf "$target"/usr/share/cracklib
#  i18n
rm -rf "$target"/usr/share/i18n
#  yum cache
rm -rf "$target"/var/cache/yum
mkdir -p --mode=0755 "$target"/var/cache/yum
#  sln
rm -rf "$target"/sbin/sln
#  ldconfig
rm -rf "$target"/etc/ld.so.cache "$target"/var/cache/ldconfig
mkdir -p --mode=0755 "$target"/var/cache/ldconfig

version=
for file in "$target"/etc/{redhat,system}-release
do
    if [ -r "$file" ]; then
        version="$(sed 's/^[^0-9\]*\([0-9.]\+\).*$/\1/' "$file")"
        break
    fi
done

if [ -z "$version" ]; then
    echo >&2 "warning: cannot autodetect OS version, using '$name' as tag"
    version=$name
fi

tar --numeric-owner -c -C "$target" . | docker import - $name:$version

docker run -i -t --rm $name:$version /bin/bash -c 'echo success'

rm -rf "$target"

#+END_SRC


*** 3. 执行脚本
#+BEGIN_SRC shell
chmod 755 ~/createimage.sh;
~/createimage.sh centos69base
#+END_SRC

// 注：centos69base是自定义的名字


*** 4. 保存镜像文件到文件
#+BEGIN_SRC shell
docker images
// 下面的c30b87670a5f是上面命令中的IMAGE ID
docker save c30b87670a5f > ~/centos69base.tar
#+END_SRC


** 使用自制的CentOS镜像
*** 1. 复制镜像文件到另一个服务器上
*** 2. 读取image
#+BEGIN_SRC shell
docker load < /tmp/centos69base.tar
#+END_SRC
*** 3. 重命名
#+BEGIN_SRC shell
docker images
// 下面的c30b87670a5f是上面命令中的IMAGE ID
docker tag 043d26e059cd centos69base:6.9
#+END_SRC

*** 4. 执行
#+BEGIN_SRC shell
docker run -i -t 043d26e059cd /bin/bash
#+END_SRC


** 关于运行
*** 1. 退出不保存数据
直接使用exit命令，第二次run的时候，镜像的数据不会有任何改变

*** 2. 退出时保存正在运行的数据
在container内部时敲 Crtl-p 然后 Ctrl-q

*** 3. 把修改的镜像保存为新的镜像
- 第一
#+BEGIN_SRC shell
    docker run -i -t 043d26e059cd /bin/bash
#+END_SRC
- 第二
#+BEGIN_SRC shell
     docker start 043d26e059cd
#+END_SRC
- 第三
#+BEGIN_SRC shell
     docker attach 043d26e059cd
#+END_SRC
- 修改镜像，比如安装一个软件emacs
- 第五
     Ctrl-p Ctrl-q
- 第六
#+BEGIN_SRC shell
     docker commit 043d26e059cd centos69base/emacs:emacs_base
#+END_SRC
- 第七
目前为止，新的镜像已经可以使用，导出可用以下命令(和制作一样的命令)
#+BEGIN_SRC shell
docker save centos69base/emacs:emacs_base > ~/centos69base_emacs.tar
#+END_SRC

 4. 进入docker的时候可能会出现ctrl-c停止docker的情况，使用以下命令
#+BEGIN_SRC shell
    docker attach 043d26e059cd --sig-proxy=false
#+END_SRC

 
** 术语
- 镜像：image，尚未运行的母文件
- 容器：某个镜像的实例，正在运行

** 常用命令
#+BEGIN_SRC shell
# 运行
docker run -it a9ae834889d1 /bin/bash

# 启动(用于保持修改)
docker start a9ae834889d1

# 列出所有正在运行的容器
docker ps -all

# 列出本地镜像
docker images

#连接到正在运行中的容器
docker attach a9ae834889d1
docker attach a9ae834889d1 --sig-proxy=false

# 将镜像保存成tar文件
a9ae834889d1 > ~/imagename.tar

# 读取本地镜像文件
docker load < /root/centos69base.tar

#从容器创建一个新的镜像
docker commit a9ae834889d1 centos69/emacs:emacs_base

# 修改一个镜像的tag
docker tag a9ae834889d1 centos69base:6.9

# 修改容器名
docker rename old容器名  new容器名

# 删除镜像(停止它)
docker rm a9ae834889d1

# 暂时退出容器，并保持容器运行(使用attach再连上去)
Ctrl-p + Ctrl-q

# 退出并停止镜像
exit
#+END_SRC
** 有用的链接
- [[https://github.com/Apriorhythm/docker-cheat-sheet][Docker Cheat Sheet]]
- [[https://docs.docker.com/][Docker Documentation]]
- [[http://www.runoob.com/docker/docker-tutorial.html][Docker Runoob 教程]]

- [[https://www.youtube.com/watch?v=s948NKa1I1I][Creating a custom CentOS 6.5 Docker container]]
- [[https://devhints.io/docker][Docker CLI cheatsheet]]

* Troubleshooting
1. /usr/share/cracklib/pw_dict.pwd: No such file or directory
yum -y reinstall cracklib-dicts

